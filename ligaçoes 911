{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Untitled54.ipynb",
      "provenance": [],
      "authorship_tag": "ABX9TyOHURqThQXAoApEyJ2mNbcd",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/TIAGODUMONT/Aquario-Rob-/blob/master/liga%C3%A7oes%20911\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "NqSX3vFUFq5V"
      },
      "source": [
        "import pandas as pd\r\n",
        "import numpy as np\r\n",
        "import matplotlib.pyplot as plt\r\n",
        "import seaborn as sns\r\n",
        "%matplotlib inline "
      ],
      "execution_count": 103,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "me0NwB0rGDWG"
      },
      "source": [
        "df = pd.read_csv('911.csv')"
      ],
      "execution_count": 104,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "79XEB4VaHFmt",
        "outputId": "4bb7c4b7-fd9f-41e4-8ff9-fa1f22dd6815"
      },
      "source": [
        "df.info()"
      ],
      "execution_count": 105,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 99492 entries, 0 to 99491\n",
            "Data columns (total 9 columns):\n",
            " #   Column     Non-Null Count  Dtype  \n",
            "---  ------     --------------  -----  \n",
            " 0   lat        99492 non-null  float64\n",
            " 1   lng        99492 non-null  float64\n",
            " 2   desc       99492 non-null  object \n",
            " 3   zip        86637 non-null  float64\n",
            " 4   title      99492 non-null  object \n",
            " 5   timeStamp  99492 non-null  object \n",
            " 6   twp        99449 non-null  object \n",
            " 7   addr       98973 non-null  object \n",
            " 8   e          99492 non-null  int64  \n",
            "dtypes: float64(3), int64(1), object(5)\n",
            "memory usage: 6.8+ MB\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 285
        },
        "id": "2S8V8ZvIHIah",
        "outputId": "7be335bd-7b73-429b-be87-5f5c934f7bbb"
      },
      "source": [
        "df.head()"
      ],
      "execution_count": 106,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>lat</th>\n",
              "      <th>lng</th>\n",
              "      <th>desc</th>\n",
              "      <th>zip</th>\n",
              "      <th>title</th>\n",
              "      <th>timeStamp</th>\n",
              "      <th>twp</th>\n",
              "      <th>addr</th>\n",
              "      <th>e</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>40.297876</td>\n",
              "      <td>-75.581294</td>\n",
              "      <td>REINDEER CT &amp; DEAD END;  NEW HANOVER; Station ...</td>\n",
              "      <td>19525.0</td>\n",
              "      <td>EMS: BACK PAINS/INJURY</td>\n",
              "      <td>2015-12-10 17:40:00</td>\n",
              "      <td>NEW HANOVER</td>\n",
              "      <td>REINDEER CT &amp; DEAD END</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>40.258061</td>\n",
              "      <td>-75.264680</td>\n",
              "      <td>BRIAR PATH &amp; WHITEMARSH LN;  HATFIELD TOWNSHIP...</td>\n",
              "      <td>19446.0</td>\n",
              "      <td>EMS: DIABETIC EMERGENCY</td>\n",
              "      <td>2015-12-10 17:40:00</td>\n",
              "      <td>HATFIELD TOWNSHIP</td>\n",
              "      <td>BRIAR PATH &amp; WHITEMARSH LN</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>40.121182</td>\n",
              "      <td>-75.351975</td>\n",
              "      <td>HAWS AVE; NORRISTOWN; 2015-12-10 @ 14:39:21-St...</td>\n",
              "      <td>19401.0</td>\n",
              "      <td>Fire: GAS-ODOR/LEAK</td>\n",
              "      <td>2015-12-10 17:40:00</td>\n",
              "      <td>NORRISTOWN</td>\n",
              "      <td>HAWS AVE</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>40.116153</td>\n",
              "      <td>-75.343513</td>\n",
              "      <td>AIRY ST &amp; SWEDE ST;  NORRISTOWN; Station 308A;...</td>\n",
              "      <td>19401.0</td>\n",
              "      <td>EMS: CARDIAC EMERGENCY</td>\n",
              "      <td>2015-12-10 17:40:01</td>\n",
              "      <td>NORRISTOWN</td>\n",
              "      <td>AIRY ST &amp; SWEDE ST</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>40.251492</td>\n",
              "      <td>-75.603350</td>\n",
              "      <td>CHERRYWOOD CT &amp; DEAD END;  LOWER POTTSGROVE; S...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>EMS: DIZZINESS</td>\n",
              "      <td>2015-12-10 17:40:01</td>\n",
              "      <td>LOWER POTTSGROVE</td>\n",
              "      <td>CHERRYWOOD CT &amp; DEAD END</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "         lat        lng  ...                        addr  e\n",
              "0  40.297876 -75.581294  ...      REINDEER CT & DEAD END  1\n",
              "1  40.258061 -75.264680  ...  BRIAR PATH & WHITEMARSH LN  1\n",
              "2  40.121182 -75.351975  ...                    HAWS AVE  1\n",
              "3  40.116153 -75.343513  ...          AIRY ST & SWEDE ST  1\n",
              "4  40.251492 -75.603350  ...    CHERRYWOOD CT & DEAD END  1\n",
              "\n",
              "[5 rows x 9 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 106
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ftH18FCbHZrB",
        "outputId": "c8b94320-ee32-4874-f085-cc2c3d97fa14"
      },
      "source": [
        "df['zip'].value_counts().head(10)\r\n",
        "    \r\n"
      ],
      "execution_count": 107,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "19401.0    6979\n",
              "19464.0    6643\n",
              "19403.0    4854\n",
              "19446.0    4748\n",
              "19406.0    3174\n",
              "19002.0    3050\n",
              "19468.0    2990\n",
              "19454.0    2781\n",
              "19090.0    2635\n",
              "19038.0    2578\n",
              "Name: zip, dtype: int64"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 107
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "E8mKY3YNHhXB",
        "outputId": "707f1056-57dc-435b-f8c2-83442a943113"
      },
      "source": [
        "df['twp'].value_counts().head(10)\r\n",
        "    "
      ],
      "execution_count": 108,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "LOWER MERION        8443\n",
              "ABINGTON            5977\n",
              "NORRISTOWN          5890\n",
              "UPPER MERION        5227\n",
              "CHELTENHAM          4575\n",
              "POTTSTOWN           4146\n",
              "UPPER MORELAND      3434\n",
              "LOWER PROVIDENCE    3225\n",
              "PLYMOUTH            3158\n",
              "HORSHAM             3003\n",
              "Name: twp, dtype: int64"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 108
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "DOcCG-3BIkYs",
        "outputId": "b7597d5b-3e6f-43fc-9146-2a5e64305ce2"
      },
      "source": [
        "df['title'].nunique()"
      ],
      "execution_count": 109,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "110"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 109
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "h708sG8aJHet",
        "outputId": "339cfbfb-a3fd-4db3-9f76-2bee11a849a4"
      },
      "source": [
        "df.title"
      ],
      "execution_count": 110,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0             EMS: BACK PAINS/INJURY\n",
              "1            EMS: DIABETIC EMERGENCY\n",
              "2                Fire: GAS-ODOR/LEAK\n",
              "3             EMS: CARDIAC EMERGENCY\n",
              "4                     EMS: DIZZINESS\n",
              "                    ...             \n",
              "99487    Traffic: VEHICLE ACCIDENT -\n",
              "99488    Traffic: VEHICLE ACCIDENT -\n",
              "99489               EMS: FALL VICTIM\n",
              "99490           EMS: NAUSEA/VOMITING\n",
              "99491    Traffic: VEHICLE ACCIDENT -\n",
              "Name: title, Length: 99492, dtype: object"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 110
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "id": "dorGBPYKJLpd",
        "outputId": "3e14ef23-fdc4-4ba7-81d0-f7f45839539a"
      },
      "source": [
        "df['title'].iloc[0].split(':')[0]\r\n",
        "                 "
      ],
      "execution_count": 111,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            },
            "text/plain": [
              "'EMS'"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 111
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "_I42piUnJ7-D"
      },
      "source": [
        "df['reason']= df['title'].apply(lambda title : title.split(':')[0])"
      ],
      "execution_count": 112,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 770
        },
        "id": "XhYyZ00NKy_Z",
        "outputId": "62d975ea-f3fd-491f-ef3e-34df313e4303"
      },
      "source": [
        "df"
      ],
      "execution_count": 113,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>lat</th>\n",
              "      <th>lng</th>\n",
              "      <th>desc</th>\n",
              "      <th>zip</th>\n",
              "      <th>title</th>\n",
              "      <th>timeStamp</th>\n",
              "      <th>twp</th>\n",
              "      <th>addr</th>\n",
              "      <th>e</th>\n",
              "      <th>reason</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>40.297876</td>\n",
              "      <td>-75.581294</td>\n",
              "      <td>REINDEER CT &amp; DEAD END;  NEW HANOVER; Station ...</td>\n",
              "      <td>19525.0</td>\n",
              "      <td>EMS: BACK PAINS/INJURY</td>\n",
              "      <td>2015-12-10 17:40:00</td>\n",
              "      <td>NEW HANOVER</td>\n",
              "      <td>REINDEER CT &amp; DEAD END</td>\n",
              "      <td>1</td>\n",
              "      <td>EMS</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>40.258061</td>\n",
              "      <td>-75.264680</td>\n",
              "      <td>BRIAR PATH &amp; WHITEMARSH LN;  HATFIELD TOWNSHIP...</td>\n",
              "      <td>19446.0</td>\n",
              "      <td>EMS: DIABETIC EMERGENCY</td>\n",
              "      <td>2015-12-10 17:40:00</td>\n",
              "      <td>HATFIELD TOWNSHIP</td>\n",
              "      <td>BRIAR PATH &amp; WHITEMARSH LN</td>\n",
              "      <td>1</td>\n",
              "      <td>EMS</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>40.121182</td>\n",
              "      <td>-75.351975</td>\n",
              "      <td>HAWS AVE; NORRISTOWN; 2015-12-10 @ 14:39:21-St...</td>\n",
              "      <td>19401.0</td>\n",
              "      <td>Fire: GAS-ODOR/LEAK</td>\n",
              "      <td>2015-12-10 17:40:00</td>\n",
              "      <td>NORRISTOWN</td>\n",
              "      <td>HAWS AVE</td>\n",
              "      <td>1</td>\n",
              "      <td>Fire</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>40.116153</td>\n",
              "      <td>-75.343513</td>\n",
              "      <td>AIRY ST &amp; SWEDE ST;  NORRISTOWN; Station 308A;...</td>\n",
              "      <td>19401.0</td>\n",
              "      <td>EMS: CARDIAC EMERGENCY</td>\n",
              "      <td>2015-12-10 17:40:01</td>\n",
              "      <td>NORRISTOWN</td>\n",
              "      <td>AIRY ST &amp; SWEDE ST</td>\n",
              "      <td>1</td>\n",
              "      <td>EMS</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>40.251492</td>\n",
              "      <td>-75.603350</td>\n",
              "      <td>CHERRYWOOD CT &amp; DEAD END;  LOWER POTTSGROVE; S...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>EMS: DIZZINESS</td>\n",
              "      <td>2015-12-10 17:40:01</td>\n",
              "      <td>LOWER POTTSGROVE</td>\n",
              "      <td>CHERRYWOOD CT &amp; DEAD END</td>\n",
              "      <td>1</td>\n",
              "      <td>EMS</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>99487</th>\n",
              "      <td>40.132869</td>\n",
              "      <td>-75.333515</td>\n",
              "      <td>MARKLEY ST &amp; W LOGAN ST; NORRISTOWN; 2016-08-2...</td>\n",
              "      <td>19401.0</td>\n",
              "      <td>Traffic: VEHICLE ACCIDENT -</td>\n",
              "      <td>2016-08-24 11:06:00</td>\n",
              "      <td>NORRISTOWN</td>\n",
              "      <td>MARKLEY ST &amp; W LOGAN ST</td>\n",
              "      <td>1</td>\n",
              "      <td>Traffic</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>99488</th>\n",
              "      <td>40.006974</td>\n",
              "      <td>-75.289080</td>\n",
              "      <td>LANCASTER AVE &amp; RITTENHOUSE PL; LOWER MERION; ...</td>\n",
              "      <td>19003.0</td>\n",
              "      <td>Traffic: VEHICLE ACCIDENT -</td>\n",
              "      <td>2016-08-24 11:07:02</td>\n",
              "      <td>LOWER MERION</td>\n",
              "      <td>LANCASTER AVE &amp; RITTENHOUSE PL</td>\n",
              "      <td>1</td>\n",
              "      <td>Traffic</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>99489</th>\n",
              "      <td>40.115429</td>\n",
              "      <td>-75.334679</td>\n",
              "      <td>CHESTNUT ST &amp; WALNUT ST;  NORRISTOWN; Station ...</td>\n",
              "      <td>19401.0</td>\n",
              "      <td>EMS: FALL VICTIM</td>\n",
              "      <td>2016-08-24 11:12:00</td>\n",
              "      <td>NORRISTOWN</td>\n",
              "      <td>CHESTNUT ST &amp; WALNUT ST</td>\n",
              "      <td>1</td>\n",
              "      <td>EMS</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>99490</th>\n",
              "      <td>40.186431</td>\n",
              "      <td>-75.192555</td>\n",
              "      <td>WELSH RD &amp; WEBSTER LN;  HORSHAM; Station 352; ...</td>\n",
              "      <td>19002.0</td>\n",
              "      <td>EMS: NAUSEA/VOMITING</td>\n",
              "      <td>2016-08-24 11:17:01</td>\n",
              "      <td>HORSHAM</td>\n",
              "      <td>WELSH RD &amp; WEBSTER LN</td>\n",
              "      <td>1</td>\n",
              "      <td>EMS</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>99491</th>\n",
              "      <td>40.207055</td>\n",
              "      <td>-75.317952</td>\n",
              "      <td>MORRIS RD &amp; S BROAD ST; UPPER GWYNEDD; 2016-08...</td>\n",
              "      <td>19446.0</td>\n",
              "      <td>Traffic: VEHICLE ACCIDENT -</td>\n",
              "      <td>2016-08-24 11:17:02</td>\n",
              "      <td>UPPER GWYNEDD</td>\n",
              "      <td>MORRIS RD &amp; S BROAD ST</td>\n",
              "      <td>1</td>\n",
              "      <td>Traffic</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>99492 rows × 10 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "             lat        lng  ...  e   reason\n",
              "0      40.297876 -75.581294  ...  1      EMS\n",
              "1      40.258061 -75.264680  ...  1      EMS\n",
              "2      40.121182 -75.351975  ...  1     Fire\n",
              "3      40.116153 -75.343513  ...  1      EMS\n",
              "4      40.251492 -75.603350  ...  1      EMS\n",
              "...          ...        ...  ... ..      ...\n",
              "99487  40.132869 -75.333515  ...  1  Traffic\n",
              "99488  40.006974 -75.289080  ...  1  Traffic\n",
              "99489  40.115429 -75.334679  ...  1      EMS\n",
              "99490  40.186431 -75.192555  ...  1      EMS\n",
              "99491  40.207055 -75.317952  ...  1  Traffic\n",
              "\n",
              "[99492 rows x 10 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 113
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "0CfsAjGDK10A",
        "outputId": "7bb06056-07f7-4e87-c3d5-d078eb67f043"
      },
      "source": [
        "df.reason"
      ],
      "execution_count": 114,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0            EMS\n",
              "1            EMS\n",
              "2           Fire\n",
              "3            EMS\n",
              "4            EMS\n",
              "          ...   \n",
              "99487    Traffic\n",
              "99488    Traffic\n",
              "99489        EMS\n",
              "99490        EMS\n",
              "99491    Traffic\n",
              "Name: reason, Length: 99492, dtype: object"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 114
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Fyo1OmdgLH2f",
        "outputId": "09b558d5-99a8-4d1f-e3c2-597e79a2e548"
      },
      "source": [
        "df.reason.value_counts().head(5)"
      ],
      "execution_count": 115,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "EMS        48877\n",
              "Traffic    35695\n",
              "Fire       14920\n",
              "Name: reason, dtype: int64"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 115
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 574
        },
        "id": "FduqsMeWLUt3",
        "outputId": "36fc25a3-f916-4fba-a7e4-9a9fe14fe1f4"
      },
      "source": [
        "sns.countplot(x='reason', data=df , pallete = 'red')"
      ],
      "execution_count": 116,
      "outputs": [
        {
          "output_type": "error",
          "ename": "AttributeError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-116-d0836c795c12>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0msns\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcountplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'reason'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdf\u001b[0m \u001b[0;34m,\u001b[0m \u001b[0mpallete\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m'red'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/seaborn/_decorators.py\u001b[0m in \u001b[0;36minner_f\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m     44\u001b[0m             )\n\u001b[1;32m     45\u001b[0m         \u001b[0mkwargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mupdate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m{\u001b[0m\u001b[0mk\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0marg\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mk\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0marg\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mzip\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msig\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mparameters\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 46\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     47\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0minner_f\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     48\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/seaborn/categorical.py\u001b[0m in \u001b[0;36mcountplot\u001b[0;34m(x, y, hue, data, order, hue_order, orient, color, palette, saturation, dodge, ax, **kwargs)\u001b[0m\n\u001b[1;32m   3605\u001b[0m         \u001b[0max\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgca\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3606\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3607\u001b[0;31m     \u001b[0mplotter\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0max\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   3608\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0max\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3609\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/seaborn/categorical.py\u001b[0m in \u001b[0;36mplot\u001b[0;34m(self, ax, bar_kws)\u001b[0m\n\u001b[1;32m   1637\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0max\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbar_kws\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1638\u001b[0m         \u001b[0;34m\"\"\"Make the plot.\"\"\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1639\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdraw_bars\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0max\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbar_kws\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1640\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mannotate_axes\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0max\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1641\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0morient\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m\"h\"\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/seaborn/categorical.py\u001b[0m in \u001b[0;36mdraw_bars\u001b[0;34m(self, ax, kws)\u001b[0m\n\u001b[1;32m   1603\u001b[0m             \u001b[0;31m# Draw the bars\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1604\u001b[0m             barfunc(barpos, self.statistic, self.width,\n\u001b[0;32m-> 1605\u001b[0;31m                     color=self.colors, align=\"center\", **kws)\n\u001b[0m\u001b[1;32m   1606\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1607\u001b[0m             \u001b[0;31m# Draw the confidence intervals\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/matplotlib/__init__.py\u001b[0m in \u001b[0;36minner\u001b[0;34m(ax, data, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1563\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0minner\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0max\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1564\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mdata\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1565\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0max\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0mmap\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msanitize_sequence\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1566\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1567\u001b[0m         \u001b[0mbound\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnew_sig\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbind\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0max\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/matplotlib/axes/_axes.py\u001b[0m in \u001b[0;36mbar\u001b[0;34m(self, x, height, width, bottom, align, **kwargs)\u001b[0m\n\u001b[1;32m   2396\u001b[0m                 \u001b[0mlabel\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'_nolegend_'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2397\u001b[0m                 )\n\u001b[0;32m-> 2398\u001b[0;31m             \u001b[0mr\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mupdate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2399\u001b[0m             \u001b[0mr\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_path\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_interpolation_steps\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m100\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2400\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0morientation\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m'vertical'\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/matplotlib/artist.py\u001b[0m in \u001b[0;36mupdate\u001b[0;34m(self, props)\u001b[0m\n\u001b[1;32m   1004\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1005\u001b[0m         \u001b[0;32mwith\u001b[0m \u001b[0mcbook\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_setattr_cm\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0meventson\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1006\u001b[0;31m             \u001b[0mret\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0m_update_property\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mk\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mv\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mk\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mv\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mprops\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mitems\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1007\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1008\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mret\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/matplotlib/artist.py\u001b[0m in \u001b[0;36m<listcomp>\u001b[0;34m(.0)\u001b[0m\n\u001b[1;32m   1004\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1005\u001b[0m         \u001b[0;32mwith\u001b[0m \u001b[0mcbook\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_setattr_cm\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0meventson\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1006\u001b[0;31m             \u001b[0mret\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0m_update_property\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mk\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mv\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mk\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mv\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mprops\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mitems\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1007\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1008\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mret\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/matplotlib/artist.py\u001b[0m in \u001b[0;36m_update_property\u001b[0;34m(self, k, v)\u001b[0m\n\u001b[1;32m   1000\u001b[0m                 \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mcallable\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfunc\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1001\u001b[0m                     raise AttributeError('{!r} object has no property {!r}'\n\u001b[0;32m-> 1002\u001b[0;31m                                          .format(type(self).__name__, k))\n\u001b[0m\u001b[1;32m   1003\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mv\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1004\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mAttributeError\u001b[0m: 'Rectangle' object has no property 'pallete'"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAXwAAAD8CAYAAAB0IB+mAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+WH4yJAAANT0lEQVR4nO3cYYjkd33H8ffHO1NpjKb0VpC706T00njYQtIlTRFqirZc8uDugUXuIFgleGAbKVWEFEuU+MiGWhCu1ZOKVdAYfSALntwDjQTEC7chNXgXItvTeheFrDHNk6Ax7bcPZtKdrneZf3Zndy/7fb/gYP7/+e3Mlx97752d2ZlUFZKk7e8VWz2AJGlzGHxJasLgS1ITBl+SmjD4ktSEwZekJqYGP8lnkzyZ5PuXuD5JPplkKcmjSW6c/ZiSpPUa8gj/c8CBF7n+VmDf+N9R4F/WP5YkadamBr+qHgR+/iJLDgGfr5FTwNVJXj+rASVJs7FzBrexGzg/cXxhfO6nqxcmOcrotwCuvPLKP7z++utncPeS1MfDDz/8s6qaW8vXziL4g1XVceA4wPz8fC0uLm7m3UvSy16S/1zr187ir3SeAPZOHO8Zn5MkXUZmEfwF4F3jv9a5GXimqn7t6RxJ0taa+pROki8BtwC7klwAPgK8EqCqPgWcAG4DloBngfds1LCSpLWbGvyqOjLl+gL+emYTSZI2hO+0laQmDL4kNWHwJakJgy9JTRh8SWrC4EtSEwZfkpow+JLUhMGXpCYMviQ1YfAlqQmDL0lNGHxJasLgS1ITBl+SmjD4ktSEwZekJgy+JDVh8CWpCYMvSU0YfElqwuBLUhMGX5KaMPiS1ITBl6QmDL4kNWHwJakJgy9JTRh8SWrC4EtSEwZfkpow+JLUhMGXpCYMviQ1YfAlqYlBwU9yIMnjSZaS3HWR69+Q5IEkjyR5NMltsx9VkrQeU4OfZAdwDLgV2A8cSbJ/1bK/B+6vqhuAw8A/z3pQSdL6DHmEfxOwVFXnquo54D7g0Ko1BbxmfPm1wE9mN6IkaRaGBH83cH7i+ML43KSPArcnuQCcAN5/sRtKcjTJYpLF5eXlNYwrSVqrWb1oewT4XFXtAW4DvpDk1267qo5X1XxVzc/Nzc3oriVJQwwJ/hPA3onjPeNzk+4A7geoqu8CrwJ2zWJASdJsDAn+aWBfkmuTXMHoRdmFVWt+DLwNIMmbGAXf52wk6TIyNfhV9TxwJ3ASeIzRX+OcSXJPkoPjZR8E3pvke8CXgHdXVW3U0JKkl27nkEVVdYLRi7GT5+6euHwWeMtsR5MkzZLvtJWkJgy+JDVh8CWpCYMvSU0YfElqwuBLUhMGX5KaMPiS1ITBl6QmDL4kNWHwJakJgy9JTRh8SWrC4EtSEwZfkpow+JLUhMGXpCYMviQ1YfAlqQmDL0lNGHxJasLgS1ITBl+SmjD4ktSEwZekJgy+JDVh8CWpCYMvSU0YfElqwuBLUhMGX5KaMPiS1ITBl6QmDL4kNTEo+EkOJHk8yVKSuy6x5p1JziY5k+SLsx1TkrReO6ctSLIDOAb8GXABOJ1koarOTqzZB/wd8JaqejrJ6zZqYEnS2gx5hH8TsFRV56rqOeA+4NCqNe8FjlXV0wBV9eRsx5QkrdeQ4O8Gzk8cXxifm3QdcF2S7yQ5leTAxW4oydEki0kWl5eX1zaxJGlNZvWi7U5gH3ALcAT4TJKrVy+qquNVNV9V83NzczO6a0nSEEOC/wSwd+J4z/jcpAvAQlX9qqp+CPyA0Q8ASdJlYkjwTwP7klyb5ArgMLCwas3XGD26J8kuRk/xnJvhnJKkdZoa/Kp6HrgTOAk8BtxfVWeS3JPk4HjZSeCpJGeBB4APVdVTGzW0JOmlS1VtyR3Pz8/X4uLilty3JL1cJXm4qubX8rW+01aSmjD4ktSEwZekJgy+JDVh8CWpCYMvSU0YfElqwuBLUhMGX5KaMPiS1ITBl6QmDL4kNWHwJakJgy9JTRh8SWrC4EtSEwZfkpow+JLUhMGXpCYMviQ1YfAlqQmDL0lNGHxJasLgS1ITBl+SmjD4ktSEwZekJgy+JDVh8CWpCYMvSU0YfElqwuBLUhMGX5KaMPiS1ITBl6QmBgU/yYEkjydZSnLXi6x7R5JKMj+7ESVJszA1+El2AMeAW4H9wJEk+y+y7irgb4CHZj2kJGn9hjzCvwlYqqpzVfUccB9w6CLrPgZ8HPjFDOeTJM3IkODvBs5PHF8Yn/s/SW4E9lbV11/shpIcTbKYZHF5efklDytJWrt1v2ib5BXAJ4APTltbVcerar6q5ufm5tZ715Kkl2BI8J8A9k4c7xmfe8FVwJuBbyf5EXAzsOALt5J0eRkS/NPAviTXJrkCOAwsvHBlVT1TVbuq6pqqugY4BRysqsUNmViStCZTg19VzwN3AieBx4D7q+pMknuSHNzoASVJs7FzyKKqOgGcWHXu7kusvWX9Y0mSZs132kpSEwZfkpow+JLUhMGXpCYMviQ1YfAlqQmDL0lNGHxJasLgS1ITBl+SmjD4ktSEwZekJgy+JDVh8CWpCYMvSU0YfElqwuBLUhMGX5KaMPiS1ITBl6QmDL4kNWHwJakJgy9JTRh8SWrC4EtSEwZfkpow+JLUhMGXpCYMviQ1YfAlqQmDL0lNGHxJasLgS1ITBl+SmhgU/CQHkjyeZCnJXRe5/gNJziZ5NMk3k7xx9qNKktZjavCT7ACOAbcC+4EjSfavWvYIMF9VfwB8FfiHWQ8qSVqfIY/wbwKWqupcVT0H3AccmlxQVQ9U1bPjw1PAntmOKUlaryHB3w2cnzi+MD53KXcA37jYFUmOJllMsri8vDx8SknSus30RdsktwPzwL0Xu76qjlfVfFXNz83NzfKuJUlT7Byw5glg78TxnvG5/yfJ24EPA2+tql/OZjxJ0qwMeYR/GtiX5NokVwCHgYXJBUluAD4NHKyqJ2c/piRpvaYGv6qeB+4ETgKPAfdX1Zkk9yQ5OF52L/Bq4CtJ/j3JwiVuTpK0RYY8pUNVnQBOrDp398Tlt894LknSjPlOW0lqwuBLUhMGX5KaMPiS1ITBl6QmDL4kNWHwJakJgy9JTRh8SWrC4EtSEwZfkpow+JLUhMGXpCYMviQ1YfAlqQmDL0lNGHxJasLgS1ITBl+SmjD4ktSEwZekJgy+JDVh8CWpCYMvSU0YfElqwuBLUhMGX5KaMPiS1ITBl6QmDL4kNWHwJakJgy9JTRh8SWrC4EtSEwZfkpoYFPwkB5I8nmQpyV0Xuf43knx5fP1DSa6Z9aCSpPWZGvwkO4BjwK3AfuBIkv2rlt0BPF1Vvwv8E/DxWQ8qSVqfIY/wbwKWqupcVT0H3AccWrXmEPBv48tfBd6WJLMbU5K0XjsHrNkNnJ84vgD80aXWVNXzSZ4Bfhv42eSiJEeBo+PDXyb5/lqG3oZ2sWqvGnMvVrgXK9yLFb+31i8cEvyZqarjwHGAJItVNb+Z93+5ci9WuBcr3IsV7sWKJItr/dohT+k8AeydON4zPnfRNUl2Aq8FnlrrUJKk2RsS/NPAviTXJrkCOAwsrFqzAPzl+PJfAN+qqprdmJKk9Zr6lM74Ofk7gZPADuCzVXUmyT3AYlUtAP8KfCHJEvBzRj8Upjm+jrm3G/dihXuxwr1Y4V6sWPNexAfiktSD77SVpCYMviQ1seHB92MZVgzYiw8kOZvk0STfTPLGrZhzM0zbi4l170hSSbbtn+QN2Ysk7xx/b5xJ8sXNnnGzDPg/8oYkDyR5ZPz/5LatmHOjJflskicv9V6ljHxyvE+PJrlx0A1X1Yb9Y/Qi738AvwNcAXwP2L9qzV8BnxpfPgx8eSNn2qp/A/fiT4HfHF9+X+e9GK+7CngQOAXMb/XcW/h9sQ94BPit8fHrtnruLdyL48D7xpf3Az/a6rk3aC/+BLgR+P4lrr8N+AYQ4GbgoSG3u9GP8P1YhhVT96KqHqiqZ8eHpxi952E7GvJ9AfAxRp/L9IvNHG6TDdmL9wLHquppgKp6cpNn3CxD9qKA14wvvxb4ySbOt2mq6kFGf/F4KYeAz9fIKeDqJK+fdrsbHfyLfSzD7kutqarngRc+lmG7GbIXk+5g9BN8O5q6F+NfUfdW1dc3c7AtMOT74jrguiTfSXIqyYFNm25zDdmLjwK3J7kAnADevzmjXXZeak+ATf5oBQ2T5HZgHnjrVs+yFZK8AvgE8O4tHuVysZPR0zq3MPqt78Ekv19V/7WlU22NI8Dnquofk/wxo/f/vLmq/merB3s52OhH+H4sw4ohe0GStwMfBg5W1S83abbNNm0vrgLeDHw7yY8YPUe5sE1fuB3yfXEBWKiqX1XVD4EfMPoBsN0M2Ys7gPsBquq7wKsYfbBaN4N6stpGB9+PZVgxdS+S3AB8mlHst+vztDBlL6rqmaraVVXXVNU1jF7POFhVa/7QqMvYkP8jX2P06J4kuxg9xXNuM4fcJEP24sfA2wCSvIlR8Jc3dcrLwwLwrvFf69wMPFNVP532RRv6lE5t3McyvOwM3It7gVcDXxm/bv3jqjq4ZUNvkIF70cLAvTgJ/HmSs8B/Ax+qqm33W/DAvfgg8Jkkf8voBdx3b8cHiEm+xOiH/K7x6xUfAV4JUFWfYvT6xW3AEvAs8J5Bt7sN90qSdBG+01aSmjD4ktSEwZekJgy+JDVh8CWpCYMvSU0YfElq4n8BzPZcum6w2goAAAAASUVORK5CYII=\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2kBkEZPALv6G",
        "outputId": "7ddcba04-84c5-4688-dbd1-914d7bdf473d"
      },
      "source": [
        "df.columns"
      ],
      "execution_count": 117,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Index(['lat', 'lng', 'desc', 'zip', 'title', 'timeStamp', 'twp', 'addr', 'e',\n",
              "       'reason'],\n",
              "      dtype='object')"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 117
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "jlGSr1SCXLND",
        "outputId": "bf695424-afa8-4ff2-8bef-97e5e7097ed4"
      },
      "source": [
        "type(df['timeStamp'].iloc[1])"
      ],
      "execution_count": 118,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "str"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 118
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "s1AWpKX4XRci"
      },
      "source": [
        "df['timeStamp'] = pd.to_datetime(df['timeStamp'])"
      ],
      "execution_count": 119,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "GJSrW37tYOPA",
        "outputId": "b238c24d-49f9-4f5e-e947-f7a67d5f6155"
      },
      "source": [
        "type(df['timeStamp'].iloc[1])"
      ],
      "execution_count": 120,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "pandas._libs.tslibs.timestamps.Timestamp"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 120
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "_lXuys44Y2lN"
      },
      "source": [
        "time= df['timeStamp'] = pd.to_datetime(df['timeStamp'])"
      ],
      "execution_count": 121,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "kRWakL9oauYp",
        "outputId": "16c23e70-be7c-40a5-c9e1-9c36607b9a01"
      },
      "source": [
        "time"
      ],
      "execution_count": 122,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0       2015-12-10 17:40:00\n",
              "1       2015-12-10 17:40:00\n",
              "2       2015-12-10 17:40:00\n",
              "3       2015-12-10 17:40:01\n",
              "4       2015-12-10 17:40:01\n",
              "                ...        \n",
              "99487   2016-08-24 11:06:00\n",
              "99488   2016-08-24 11:07:02\n",
              "99489   2016-08-24 11:12:00\n",
              "99490   2016-08-24 11:17:01\n",
              "99491   2016-08-24 11:17:02\n",
              "Name: timeStamp, Length: 99492, dtype: datetime64[ns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 122
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "9XHEaqhLav1h",
        "outputId": "0fc0ce0c-c8a0-429e-aa5e-7befc62d20d1"
      },
      "source": [
        "time.iloc[0]\r\n"
      ],
      "execution_count": 123,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Timestamp('2015-12-10 17:40:00')"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 123
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 298
        },
        "id": "5XkFFnBga2O4",
        "outputId": "e9d7b155-45c7-4af8-ca1d-ad6bbc7a02b9"
      },
      "source": [
        "time.hour"
      ],
      "execution_count": 124,
      "outputs": [
        {
          "output_type": "error",
          "ename": "AttributeError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-124-2fdc67306a72>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mtime\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhour\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/pandas/core/generic.py\u001b[0m in \u001b[0;36m__getattr__\u001b[0;34m(self, name)\u001b[0m\n\u001b[1;32m   5139\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_info_axis\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_can_hold_identifiers_and_holds_name\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   5140\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 5141\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mobject\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__getattribute__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   5142\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   5143\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__setattr__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mstr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvalue\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mAttributeError\u001b[0m: 'Series' object has no attribute 'hour'"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "5MrFCERqcDdO"
      },
      "source": [
        "time= df['timeStamp'].iloc[3]"
      ],
      "execution_count": 160,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "JaZF9NHwcSIV",
        "outputId": "871aeecd-43ba-4f6f-fe05-cfb22881d710"
      },
      "source": [
        "time"
      ],
      "execution_count": 161,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Timestamp('2015-12-10 17:40:01')"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 161
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "qeKaYFUHcTJ1",
        "outputId": "3c8e915a-167b-40c9-b3f2-96c31afdce07"
      },
      "source": [
        "time.hour"
      ],
      "execution_count": 162,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "17"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 162
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "LvjXYuAUcXat"
      },
      "source": [
        "df['hour'] = df[ 'timeStamp'].apply(lambda x : x.hour)"
      ],
      "execution_count": 163,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "JzAcju8MdM6Z"
      },
      "source": [
        "df['day'] = df[ 'timeStamp'].apply(lambda x : x.day)"
      ],
      "execution_count": 164,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "jDvUHJL3dMlq"
      },
      "source": [
        "df['day_of_week'] = df[ 'timeStamp'].apply(lambda x : x.dayofweek)"
      ],
      "execution_count": 165,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "uHsyWbnzxsQV"
      },
      "source": [
        "df['month'] = df['timeStamp'].apply(lambda x: x.month)"
      ],
      "execution_count": 166,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Az7nlQ4_c8Us",
        "outputId": "0c9f3767-20df-4184-8176-c3d661a40695"
      },
      "source": [
        "df['day_of_week']. value_counts()"
      ],
      "execution_count": 167,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "1    15150\n",
              "2    14879\n",
              "4    14833\n",
              "0    14680\n",
              "3    14478\n",
              "5    13336\n",
              "6    12136\n",
              "Name: day_of_week, dtype: int64"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 167
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "zLjomEhidAb7"
      },
      "source": [
        "dmap = {0:'mon', 1:'thu',2:'wed',3:'thu',4:'fri',5:'sat',6:'sun'}"
      ],
      "execution_count": 168,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "psRIFu7lfSw-"
      },
      "source": [
        "df['day_of_week'] = df['day_of_week'].map(dmap)"
      ],
      "execution_count": 169,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "lmTtGWb4fsg1",
        "outputId": "c0ef44b9-1a79-42ec-edc2-196dee592fdd"
      },
      "source": [
        "df['day_of_week']"
      ],
      "execution_count": 170,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0        thu\n",
              "1        thu\n",
              "2        thu\n",
              "3        thu\n",
              "4        thu\n",
              "        ... \n",
              "99487    wed\n",
              "99488    wed\n",
              "99489    wed\n",
              "99490    wed\n",
              "99491    wed\n",
              "Name: day_of_week, Length: 99492, dtype: object"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 170
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zIcmMWOzfxdN",
        "outputId": "4abab168-9db9-409e-800b-3be0078626fe"
      },
      "source": [
        "df['day_of_week'] == 'thu'"
      ],
      "execution_count": 171,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0         True\n",
              "1         True\n",
              "2         True\n",
              "3         True\n",
              "4         True\n",
              "         ...  \n",
              "99487    False\n",
              "99488    False\n",
              "99489    False\n",
              "99490    False\n",
              "99491    False\n",
              "Name: day_of_week, Length: 99492, dtype: bool"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 171
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 297
        },
        "id": "jvkWodjoj-HT",
        "outputId": "16ae3fe9-e68e-4c2c-856a-9292123e89be"
      },
      "source": [
        "sns.countplot(x='month', data=df)"
      ],
      "execution_count": 172,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f750ccf6668>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 172
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "m72vBm0qknsh",
        "outputId": "b3a4cc94-1f77-46e8-c9ee-a57d0d0a9835"
      },
      "source": [
        "df"
      ],
      "execution_count": 173,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>lat</th>\n",
              "      <th>lng</th>\n",
              "      <th>desc</th>\n",
              "      <th>zip</th>\n",
              "      <th>title</th>\n",
              "      <th>timeStamp</th>\n",
              "      <th>twp</th>\n",
              "      <th>addr</th>\n",
              "      <th>e</th>\n",
              "      <th>reason</th>\n",
              "      <th>hour</th>\n",
              "      <th>day</th>\n",
              "      <th>day_of_week</th>\n",
              "      <th>month</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>40.297876</td>\n",
              "      <td>-75.581294</td>\n",
              "      <td>REINDEER CT &amp; DEAD END;  NEW HANOVER; Station ...</td>\n",
              "      <td>19525.0</td>\n",
              "      <td>EMS: BACK PAINS/INJURY</td>\n",
              "      <td>2015-12-10 17:40:00</td>\n",
              "      <td>NEW HANOVER</td>\n",
              "      <td>REINDEER CT &amp; DEAD END</td>\n",
              "      <td>1</td>\n",
              "      <td>EMS</td>\n",
              "      <td>17</td>\n",
              "      <td>10</td>\n",
              "      <td>thu</td>\n",
              "      <td>12</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>40.258061</td>\n",
              "      <td>-75.264680</td>\n",
              "      <td>BRIAR PATH &amp; WHITEMARSH LN;  HATFIELD TOWNSHIP...</td>\n",
              "      <td>19446.0</td>\n",
              "      <td>EMS: DIABETIC EMERGENCY</td>\n",
              "      <td>2015-12-10 17:40:00</td>\n",
              "      <td>HATFIELD TOWNSHIP</td>\n",
              "      <td>BRIAR PATH &amp; WHITEMARSH LN</td>\n",
              "      <td>1</td>\n",
              "      <td>EMS</td>\n",
              "      <td>17</td>\n",
              "      <td>10</td>\n",
              "      <td>thu</td>\n",
              "      <td>12</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>40.121182</td>\n",
              "      <td>-75.351975</td>\n",
              "      <td>HAWS AVE; NORRISTOWN; 2015-12-10 @ 14:39:21-St...</td>\n",
              "      <td>19401.0</td>\n",
              "      <td>Fire: GAS-ODOR/LEAK</td>\n",
              "      <td>2015-12-10 17:40:00</td>\n",
              "      <td>NORRISTOWN</td>\n",
              "      <td>HAWS AVE</td>\n",
              "      <td>1</td>\n",
              "      <td>Fire</td>\n",
              "      <td>17</td>\n",
              "      <td>10</td>\n",
              "      <td>thu</td>\n",
              "      <td>12</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>40.116153</td>\n",
              "      <td>-75.343513</td>\n",
              "      <td>AIRY ST &amp; SWEDE ST;  NORRISTOWN; Station 308A;...</td>\n",
              "      <td>19401.0</td>\n",
              "      <td>EMS: CARDIAC EMERGENCY</td>\n",
              "      <td>2015-12-10 17:40:01</td>\n",
              "      <td>NORRISTOWN</td>\n",
              "      <td>AIRY ST &amp; SWEDE ST</td>\n",
              "      <td>1</td>\n",
              "      <td>EMS</td>\n",
              "      <td>17</td>\n",
              "      <td>10</td>\n",
              "      <td>thu</td>\n",
              "      <td>12</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>40.251492</td>\n",
              "      <td>-75.603350</td>\n",
              "      <td>CHERRYWOOD CT &amp; DEAD END;  LOWER POTTSGROVE; S...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>EMS: DIZZINESS</td>\n",
              "      <td>2015-12-10 17:40:01</td>\n",
              "      <td>LOWER POTTSGROVE</td>\n",
              "      <td>CHERRYWOOD CT &amp; DEAD END</td>\n",
              "      <td>1</td>\n",
              "      <td>EMS</td>\n",
              "      <td>17</td>\n",
              "      <td>10</td>\n",
              "      <td>thu</td>\n",
              "      <td>12</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>99487</th>\n",
              "      <td>40.132869</td>\n",
              "      <td>-75.333515</td>\n",
              "      <td>MARKLEY ST &amp; W LOGAN ST; NORRISTOWN; 2016-08-2...</td>\n",
              "      <td>19401.0</td>\n",
              "      <td>Traffic: VEHICLE ACCIDENT -</td>\n",
              "      <td>2016-08-24 11:06:00</td>\n",
              "      <td>NORRISTOWN</td>\n",
              "      <td>MARKLEY ST &amp; W LOGAN ST</td>\n",
              "      <td>1</td>\n",
              "      <td>Traffic</td>\n",
              "      <td>11</td>\n",
              "      <td>24</td>\n",
              "      <td>wed</td>\n",
              "      <td>8</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>99488</th>\n",
              "      <td>40.006974</td>\n",
              "      <td>-75.289080</td>\n",
              "      <td>LANCASTER AVE &amp; RITTENHOUSE PL; LOWER MERION; ...</td>\n",
              "      <td>19003.0</td>\n",
              "      <td>Traffic: VEHICLE ACCIDENT -</td>\n",
              "      <td>2016-08-24 11:07:02</td>\n",
              "      <td>LOWER MERION</td>\n",
              "      <td>LANCASTER AVE &amp; RITTENHOUSE PL</td>\n",
              "      <td>1</td>\n",
              "      <td>Traffic</td>\n",
              "      <td>11</td>\n",
              "      <td>24</td>\n",
              "      <td>wed</td>\n",
              "      <td>8</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>99489</th>\n",
              "      <td>40.115429</td>\n",
              "      <td>-75.334679</td>\n",
              "      <td>CHESTNUT ST &amp; WALNUT ST;  NORRISTOWN; Station ...</td>\n",
              "      <td>19401.0</td>\n",
              "      <td>EMS: FALL VICTIM</td>\n",
              "      <td>2016-08-24 11:12:00</td>\n",
              "      <td>NORRISTOWN</td>\n",
              "      <td>CHESTNUT ST &amp; WALNUT ST</td>\n",
              "      <td>1</td>\n",
              "      <td>EMS</td>\n",
              "      <td>11</td>\n",
              "      <td>24</td>\n",
              "      <td>wed</td>\n",
              "      <td>8</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>99490</th>\n",
              "      <td>40.186431</td>\n",
              "      <td>-75.192555</td>\n",
              "      <td>WELSH RD &amp; WEBSTER LN;  HORSHAM; Station 352; ...</td>\n",
              "      <td>19002.0</td>\n",
              "      <td>EMS: NAUSEA/VOMITING</td>\n",
              "      <td>2016-08-24 11:17:01</td>\n",
              "      <td>HORSHAM</td>\n",
              "      <td>WELSH RD &amp; WEBSTER LN</td>\n",
              "      <td>1</td>\n",
              "      <td>EMS</td>\n",
              "      <td>11</td>\n",
              "      <td>24</td>\n",
              "      <td>wed</td>\n",
              "      <td>8</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>99491</th>\n",
              "      <td>40.207055</td>\n",
              "      <td>-75.317952</td>\n",
              "      <td>MORRIS RD &amp; S BROAD ST; UPPER GWYNEDD; 2016-08...</td>\n",
              "      <td>19446.0</td>\n",
              "      <td>Traffic: VEHICLE ACCIDENT -</td>\n",
              "      <td>2016-08-24 11:17:02</td>\n",
              "      <td>UPPER GWYNEDD</td>\n",
              "      <td>MORRIS RD &amp; S BROAD ST</td>\n",
              "      <td>1</td>\n",
              "      <td>Traffic</td>\n",
              "      <td>11</td>\n",
              "      <td>24</td>\n",
              "      <td>wed</td>\n",
              "      <td>8</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>99492 rows × 14 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "             lat        lng  ... day_of_week  month\n",
              "0      40.297876 -75.581294  ...         thu     12\n",
              "1      40.258061 -75.264680  ...         thu     12\n",
              "2      40.121182 -75.351975  ...         thu     12\n",
              "3      40.116153 -75.343513  ...         thu     12\n",
              "4      40.251492 -75.603350  ...         thu     12\n",
              "...          ...        ...  ...         ...    ...\n",
              "99487  40.132869 -75.333515  ...         wed      8\n",
              "99488  40.006974 -75.289080  ...         wed      8\n",
              "99489  40.115429 -75.334679  ...         wed      8\n",
              "99490  40.186431 -75.192555  ...         wed      8\n",
              "99491  40.207055 -75.317952  ...         wed      8\n",
              "\n",
              "[99492 rows x 14 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 173
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "PZqVaXYfuMZF",
        "outputId": "79a87126-00e2-4ef1-eb11-2823fd88a794"
      },
      "source": [
        "df.columns"
      ],
      "execution_count": 174,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Index(['lat', 'lng', 'desc', 'zip', 'title', 'timeStamp', 'twp', 'addr', 'e',\n",
              "       'reason', 'hour', 'day', 'day_of_week', 'month'],\n",
              "      dtype='object')"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 174
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "nIlaY8qDuPrR"
      },
      "source": [
        "by_month = df.groupby('month').count()"
      ],
      "execution_count": 175,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 348
        },
        "id": "KTmCP1aSuZ3I",
        "outputId": "dfbde2ba-5a9c-4f65-e64a-7af286158388"
      },
      "source": [
        "by_month"
      ],
      "execution_count": 176,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>lat</th>\n",
              "      <th>lng</th>\n",
              "      <th>desc</th>\n",
              "      <th>zip</th>\n",
              "      <th>title</th>\n",
              "      <th>timeStamp</th>\n",
              "      <th>twp</th>\n",
              "      <th>addr</th>\n",
              "      <th>e</th>\n",
              "      <th>reason</th>\n",
              "      <th>hour</th>\n",
              "      <th>day</th>\n",
              "      <th>day_of_week</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>month</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>13205</td>\n",
              "      <td>13205</td>\n",
              "      <td>13205</td>\n",
              "      <td>11527</td>\n",
              "      <td>13205</td>\n",
              "      <td>13205</td>\n",
              "      <td>13203</td>\n",
              "      <td>13096</td>\n",
              "      <td>13205</td>\n",
              "      <td>13205</td>\n",
              "      <td>13205</td>\n",
              "      <td>13205</td>\n",
              "      <td>13205</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>11467</td>\n",
              "      <td>11467</td>\n",
              "      <td>11467</td>\n",
              "      <td>9930</td>\n",
              "      <td>11467</td>\n",
              "      <td>11467</td>\n",
              "      <td>11465</td>\n",
              "      <td>11396</td>\n",
              "      <td>11467</td>\n",
              "      <td>11467</td>\n",
              "      <td>11467</td>\n",
              "      <td>11467</td>\n",
              "      <td>11467</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>11101</td>\n",
              "      <td>11101</td>\n",
              "      <td>11101</td>\n",
              "      <td>9755</td>\n",
              "      <td>11101</td>\n",
              "      <td>11101</td>\n",
              "      <td>11092</td>\n",
              "      <td>11059</td>\n",
              "      <td>11101</td>\n",
              "      <td>11101</td>\n",
              "      <td>11101</td>\n",
              "      <td>11101</td>\n",
              "      <td>11101</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>11326</td>\n",
              "      <td>11326</td>\n",
              "      <td>11326</td>\n",
              "      <td>9895</td>\n",
              "      <td>11326</td>\n",
              "      <td>11326</td>\n",
              "      <td>11323</td>\n",
              "      <td>11283</td>\n",
              "      <td>11326</td>\n",
              "      <td>11326</td>\n",
              "      <td>11326</td>\n",
              "      <td>11326</td>\n",
              "      <td>11326</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>11423</td>\n",
              "      <td>11423</td>\n",
              "      <td>11423</td>\n",
              "      <td>9946</td>\n",
              "      <td>11423</td>\n",
              "      <td>11423</td>\n",
              "      <td>11420</td>\n",
              "      <td>11378</td>\n",
              "      <td>11423</td>\n",
              "      <td>11423</td>\n",
              "      <td>11423</td>\n",
              "      <td>11423</td>\n",
              "      <td>11423</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>11786</td>\n",
              "      <td>11786</td>\n",
              "      <td>11786</td>\n",
              "      <td>10212</td>\n",
              "      <td>11786</td>\n",
              "      <td>11786</td>\n",
              "      <td>11777</td>\n",
              "      <td>11732</td>\n",
              "      <td>11786</td>\n",
              "      <td>11786</td>\n",
              "      <td>11786</td>\n",
              "      <td>11786</td>\n",
              "      <td>11786</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>12137</td>\n",
              "      <td>12137</td>\n",
              "      <td>12137</td>\n",
              "      <td>10633</td>\n",
              "      <td>12137</td>\n",
              "      <td>12137</td>\n",
              "      <td>12133</td>\n",
              "      <td>12088</td>\n",
              "      <td>12137</td>\n",
              "      <td>12137</td>\n",
              "      <td>12137</td>\n",
              "      <td>12137</td>\n",
              "      <td>12137</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>9078</td>\n",
              "      <td>9078</td>\n",
              "      <td>9078</td>\n",
              "      <td>7832</td>\n",
              "      <td>9078</td>\n",
              "      <td>9078</td>\n",
              "      <td>9073</td>\n",
              "      <td>9025</td>\n",
              "      <td>9078</td>\n",
              "      <td>9078</td>\n",
              "      <td>9078</td>\n",
              "      <td>9078</td>\n",
              "      <td>9078</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>7969</td>\n",
              "      <td>7969</td>\n",
              "      <td>7969</td>\n",
              "      <td>6907</td>\n",
              "      <td>7969</td>\n",
              "      <td>7969</td>\n",
              "      <td>7963</td>\n",
              "      <td>7916</td>\n",
              "      <td>7969</td>\n",
              "      <td>7969</td>\n",
              "      <td>7969</td>\n",
              "      <td>7969</td>\n",
              "      <td>7969</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "         lat    lng   desc    zip  ...  reason   hour    day  day_of_week\n",
              "month                              ...                                   \n",
              "1      13205  13205  13205  11527  ...   13205  13205  13205        13205\n",
              "2      11467  11467  11467   9930  ...   11467  11467  11467        11467\n",
              "3      11101  11101  11101   9755  ...   11101  11101  11101        11101\n",
              "4      11326  11326  11326   9895  ...   11326  11326  11326        11326\n",
              "5      11423  11423  11423   9946  ...   11423  11423  11423        11423\n",
              "6      11786  11786  11786  10212  ...   11786  11786  11786        11786\n",
              "7      12137  12137  12137  10633  ...   12137  12137  12137        12137\n",
              "8       9078   9078   9078   7832  ...    9078   9078   9078         9078\n",
              "12      7969   7969   7969   6907  ...    7969   7969   7969         7969\n",
              "\n",
              "[9 rows x 13 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 176
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 297
        },
        "id": "QlXafzHWyV9a",
        "outputId": "c9eb0394-d76b-4eb5-8b79-2bdfb6377e7a"
      },
      "source": [
        "by_month['twp'].plot()"
      ],
      "execution_count": 177,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f750cc32c50>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 177
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 318
        },
        "id": "BZKTl_J4y8L1",
        "outputId": "8f29e887-6566-4d9d-942f-be281dca926e"
      },
      "source": [
        "by_month.reset_index()"
      ],
      "execution_count": 180,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>month</th>\n",
              "      <th>lat</th>\n",
              "      <th>lng</th>\n",
              "      <th>desc</th>\n",
              "      <th>zip</th>\n",
              "      <th>title</th>\n",
              "      <th>timeStamp</th>\n",
              "      <th>twp</th>\n",
              "      <th>addr</th>\n",
              "      <th>e</th>\n",
              "      <th>reason</th>\n",
              "      <th>hour</th>\n",
              "      <th>day</th>\n",
              "      <th>day_of_week</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>13205</td>\n",
              "      <td>13205</td>\n",
              "      <td>13205</td>\n",
              "      <td>11527</td>\n",
              "      <td>13205</td>\n",
              "      <td>13205</td>\n",
              "      <td>13203</td>\n",
              "      <td>13096</td>\n",
              "      <td>13205</td>\n",
              "      <td>13205</td>\n",
              "      <td>13205</td>\n",
              "      <td>13205</td>\n",
              "      <td>13205</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>11467</td>\n",
              "      <td>11467</td>\n",
              "      <td>11467</td>\n",
              "      <td>9930</td>\n",
              "      <td>11467</td>\n",
              "      <td>11467</td>\n",
              "      <td>11465</td>\n",
              "      <td>11396</td>\n",
              "      <td>11467</td>\n",
              "      <td>11467</td>\n",
              "      <td>11467</td>\n",
              "      <td>11467</td>\n",
              "      <td>11467</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>11101</td>\n",
              "      <td>11101</td>\n",
              "      <td>11101</td>\n",
              "      <td>9755</td>\n",
              "      <td>11101</td>\n",
              "      <td>11101</td>\n",
              "      <td>11092</td>\n",
              "      <td>11059</td>\n",
              "      <td>11101</td>\n",
              "      <td>11101</td>\n",
              "      <td>11101</td>\n",
              "      <td>11101</td>\n",
              "      <td>11101</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>11326</td>\n",
              "      <td>11326</td>\n",
              "      <td>11326</td>\n",
              "      <td>9895</td>\n",
              "      <td>11326</td>\n",
              "      <td>11326</td>\n",
              "      <td>11323</td>\n",
              "      <td>11283</td>\n",
              "      <td>11326</td>\n",
              "      <td>11326</td>\n",
              "      <td>11326</td>\n",
              "      <td>11326</td>\n",
              "      <td>11326</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>11423</td>\n",
              "      <td>11423</td>\n",
              "      <td>11423</td>\n",
              "      <td>9946</td>\n",
              "      <td>11423</td>\n",
              "      <td>11423</td>\n",
              "      <td>11420</td>\n",
              "      <td>11378</td>\n",
              "      <td>11423</td>\n",
              "      <td>11423</td>\n",
              "      <td>11423</td>\n",
              "      <td>11423</td>\n",
              "      <td>11423</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>6</td>\n",
              "      <td>11786</td>\n",
              "      <td>11786</td>\n",
              "      <td>11786</td>\n",
              "      <td>10212</td>\n",
              "      <td>11786</td>\n",
              "      <td>11786</td>\n",
              "      <td>11777</td>\n",
              "      <td>11732</td>\n",
              "      <td>11786</td>\n",
              "      <td>11786</td>\n",
              "      <td>11786</td>\n",
              "      <td>11786</td>\n",
              "      <td>11786</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>7</td>\n",
              "      <td>12137</td>\n",
              "      <td>12137</td>\n",
              "      <td>12137</td>\n",
              "      <td>10633</td>\n",
              "      <td>12137</td>\n",
              "      <td>12137</td>\n",
              "      <td>12133</td>\n",
              "      <td>12088</td>\n",
              "      <td>12137</td>\n",
              "      <td>12137</td>\n",
              "      <td>12137</td>\n",
              "      <td>12137</td>\n",
              "      <td>12137</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>8</td>\n",
              "      <td>9078</td>\n",
              "      <td>9078</td>\n",
              "      <td>9078</td>\n",
              "      <td>7832</td>\n",
              "      <td>9078</td>\n",
              "      <td>9078</td>\n",
              "      <td>9073</td>\n",
              "      <td>9025</td>\n",
              "      <td>9078</td>\n",
              "      <td>9078</td>\n",
              "      <td>9078</td>\n",
              "      <td>9078</td>\n",
              "      <td>9078</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>12</td>\n",
              "      <td>7969</td>\n",
              "      <td>7969</td>\n",
              "      <td>7969</td>\n",
              "      <td>6907</td>\n",
              "      <td>7969</td>\n",
              "      <td>7969</td>\n",
              "      <td>7963</td>\n",
              "      <td>7916</td>\n",
              "      <td>7969</td>\n",
              "      <td>7969</td>\n",
              "      <td>7969</td>\n",
              "      <td>7969</td>\n",
              "      <td>7969</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   month    lat    lng   desc    zip  ...      e  reason   hour    day  day_of_week\n",
              "0      1  13205  13205  13205  11527  ...  13205   13205  13205  13205        13205\n",
              "1      2  11467  11467  11467   9930  ...  11467   11467  11467  11467        11467\n",
              "2      3  11101  11101  11101   9755  ...  11101   11101  11101  11101        11101\n",
              "3      4  11326  11326  11326   9895  ...  11326   11326  11326  11326        11326\n",
              "4      5  11423  11423  11423   9946  ...  11423   11423  11423  11423        11423\n",
              "5      6  11786  11786  11786  10212  ...  11786   11786  11786  11786        11786\n",
              "6      7  12137  12137  12137  10633  ...  12137   12137  12137  12137        12137\n",
              "7      8   9078   9078   9078   7832  ...   9078    9078   9078   9078         9078\n",
              "8     12   7969   7969   7969   6907  ...   7969    7969   7969   7969         7969\n",
              "\n",
              "[9 rows x 14 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 180
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "NRaJGBKYzT8F"
      },
      "source": [
        "by_month.reset_index(inplace=True)"
      ],
      "execution_count": 186,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 171
        },
        "id": "NxYd9LIZzWX8",
        "outputId": "ee20d2a9-3f9e-439e-d034-dfe538915bd3"
      },
      "source": [
        "by"
      ],
      "execution_count": 184,
      "outputs": [
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-184-5c7f111e3c52>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mby\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m: name 'by' is not defined"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 318
        },
        "id": "KfkEt-sczjrM",
        "outputId": "976ed7e4-dde1-4c04-c578-50f48ffa6370"
      },
      "source": [
        "by_month"
      ],
      "execution_count": 187,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>month</th>\n",
              "      <th>lat</th>\n",
              "      <th>lng</th>\n",
              "      <th>desc</th>\n",
              "      <th>zip</th>\n",
              "      <th>title</th>\n",
              "      <th>timeStamp</th>\n",
              "      <th>twp</th>\n",
              "      <th>addr</th>\n",
              "      <th>e</th>\n",
              "      <th>reason</th>\n",
              "      <th>hour</th>\n",
              "      <th>day</th>\n",
              "      <th>day_of_week</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>13205</td>\n",
              "      <td>13205</td>\n",
              "      <td>13205</td>\n",
              "      <td>11527</td>\n",
              "      <td>13205</td>\n",
              "      <td>13205</td>\n",
              "      <td>13203</td>\n",
              "      <td>13096</td>\n",
              "      <td>13205</td>\n",
              "      <td>13205</td>\n",
              "      <td>13205</td>\n",
              "      <td>13205</td>\n",
              "      <td>13205</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>11467</td>\n",
              "      <td>11467</td>\n",
              "      <td>11467</td>\n",
              "      <td>9930</td>\n",
              "      <td>11467</td>\n",
              "      <td>11467</td>\n",
              "      <td>11465</td>\n",
              "      <td>11396</td>\n",
              "      <td>11467</td>\n",
              "      <td>11467</td>\n",
              "      <td>11467</td>\n",
              "      <td>11467</td>\n",
              "      <td>11467</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>11101</td>\n",
              "      <td>11101</td>\n",
              "      <td>11101</td>\n",
              "      <td>9755</td>\n",
              "      <td>11101</td>\n",
              "      <td>11101</td>\n",
              "      <td>11092</td>\n",
              "      <td>11059</td>\n",
              "      <td>11101</td>\n",
              "      <td>11101</td>\n",
              "      <td>11101</td>\n",
              "      <td>11101</td>\n",
              "      <td>11101</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>11326</td>\n",
              "      <td>11326</td>\n",
              "      <td>11326</td>\n",
              "      <td>9895</td>\n",
              "      <td>11326</td>\n",
              "      <td>11326</td>\n",
              "      <td>11323</td>\n",
              "      <td>11283</td>\n",
              "      <td>11326</td>\n",
              "      <td>11326</td>\n",
              "      <td>11326</td>\n",
              "      <td>11326</td>\n",
              "      <td>11326</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>11423</td>\n",
              "      <td>11423</td>\n",
              "      <td>11423</td>\n",
              "      <td>9946</td>\n",
              "      <td>11423</td>\n",
              "      <td>11423</td>\n",
              "      <td>11420</td>\n",
              "      <td>11378</td>\n",
              "      <td>11423</td>\n",
              "      <td>11423</td>\n",
              "      <td>11423</td>\n",
              "      <td>11423</td>\n",
              "      <td>11423</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>6</td>\n",
              "      <td>11786</td>\n",
              "      <td>11786</td>\n",
              "      <td>11786</td>\n",
              "      <td>10212</td>\n",
              "      <td>11786</td>\n",
              "      <td>11786</td>\n",
              "      <td>11777</td>\n",
              "      <td>11732</td>\n",
              "      <td>11786</td>\n",
              "      <td>11786</td>\n",
              "      <td>11786</td>\n",
              "      <td>11786</td>\n",
              "      <td>11786</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>7</td>\n",
              "      <td>12137</td>\n",
              "      <td>12137</td>\n",
              "      <td>12137</td>\n",
              "      <td>10633</td>\n",
              "      <td>12137</td>\n",
              "      <td>12137</td>\n",
              "      <td>12133</td>\n",
              "      <td>12088</td>\n",
              "      <td>12137</td>\n",
              "      <td>12137</td>\n",
              "      <td>12137</td>\n",
              "      <td>12137</td>\n",
              "      <td>12137</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>8</td>\n",
              "      <td>9078</td>\n",
              "      <td>9078</td>\n",
              "      <td>9078</td>\n",
              "      <td>7832</td>\n",
              "      <td>9078</td>\n",
              "      <td>9078</td>\n",
              "      <td>9073</td>\n",
              "      <td>9025</td>\n",
              "      <td>9078</td>\n",
              "      <td>9078</td>\n",
              "      <td>9078</td>\n",
              "      <td>9078</td>\n",
              "      <td>9078</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>12</td>\n",
              "      <td>7969</td>\n",
              "      <td>7969</td>\n",
              "      <td>7969</td>\n",
              "      <td>6907</td>\n",
              "      <td>7969</td>\n",
              "      <td>7969</td>\n",
              "      <td>7963</td>\n",
              "      <td>7916</td>\n",
              "      <td>7969</td>\n",
              "      <td>7969</td>\n",
              "      <td>7969</td>\n",
              "      <td>7969</td>\n",
              "      <td>7969</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   month    lat    lng   desc    zip  ...      e  reason   hour    day  day_of_week\n",
              "0      1  13205  13205  13205  11527  ...  13205   13205  13205  13205        13205\n",
              "1      2  11467  11467  11467   9930  ...  11467   11467  11467  11467        11467\n",
              "2      3  11101  11101  11101   9755  ...  11101   11101  11101  11101        11101\n",
              "3      4  11326  11326  11326   9895  ...  11326   11326  11326  11326        11326\n",
              "4      5  11423  11423  11423   9946  ...  11423   11423  11423  11423        11423\n",
              "5      6  11786  11786  11786  10212  ...  11786   11786  11786  11786        11786\n",
              "6      7  12137  12137  12137  10633  ...  12137   12137  12137  12137        12137\n",
              "7      8   9078   9078   9078   7832  ...   9078    9078   9078   9078         9078\n",
              "8     12   7969   7969   7969   6907  ...   7969    7969   7969   7969         7969\n",
              "\n",
              "[9 rows x 14 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 187
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "UGc3oLu1zlCj",
        "outputId": "50d38334-a671-4424-d65b-fcc8e17ea120"
      },
      "source": [
        "df['timeStamp']"
      ],
      "execution_count": 215,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0       2015-12-10 17:40:00\n",
              "1       2015-12-10 17:40:00\n",
              "2       2015-12-10 17:40:00\n",
              "3       2015-12-10 17:40:01\n",
              "4       2015-12-10 17:40:01\n",
              "                ...        \n",
              "99487   2016-08-24 11:06:00\n",
              "99488   2016-08-24 11:07:02\n",
              "99489   2016-08-24 11:12:00\n",
              "99490   2016-08-24 11:17:01\n",
              "99491   2016-08-24 11:17:02\n",
              "Name: timeStamp, Length: 99492, dtype: datetime64[ns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 215
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "SgJnEM2H0daf"
      },
      "source": [
        "df['Date'] = df['timeStamp'].apply(lambda x : x.date())"
      ],
      "execution_count": 213,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Cxioljfr20Cx"
      },
      "source": [
        "import pandas as pd\r\n",
        "import numpy as np\r\n",
        "import matplotlib.pyplot as plt\r\n",
        "import seaborn as sns\r\n",
        "%matplotlib inline "
      ],
      "execution_count": 214,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "bSEOVueo1Lfw",
        "outputId": "b7868923-03aa-430a-c530-99fbbc5d08f7"
      },
      "source": [
        "df.Date"
      ],
      "execution_count": 196,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0        2015-12-10\n",
              "1        2015-12-10\n",
              "2        2015-12-10\n",
              "3        2015-12-10\n",
              "4        2015-12-10\n",
              "            ...    \n",
              "99487    2016-08-24\n",
              "99488    2016-08-24\n",
              "99489    2016-08-24\n",
              "99490    2016-08-24\n",
              "99491    2016-08-24\n",
              "Name: Date, Length: 99492, dtype: object"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 196
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 297
        },
        "id": "lSWJ2DTL19P2",
        "outputId": "14cf6b1f-26ae-4f10-d824-d99d6d1a2516"
      },
      "source": [
        "df.groupby('Date').count()['twp'].plot()"
      ],
      "execution_count": 216,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f750c7b1ac8>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 216
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "arpcoW2K2l2G"
      },
      "source": [
        "day_haour = df.groupby('day_of_week').count()['twp']"
      ],
      "execution_count": 217,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Lx6Lmr_U4eIQ"
      },
      "source": [
        "day_haour = df.groupby(by=['day_of_week','hour']).count()['twp']"
      ],
      "execution_count": 218,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "glCVTL8h5H0W"
      },
      "source": [
        "day_haour = pd.DataFrame(day_haour)"
      ],
      "execution_count": 219,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 503
        },
        "id": "1QGuCsZH5WCV",
        "outputId": "406d0153-d1a4-485b-ae9d-12f981735e5b"
      },
      "source": [
        "plt.figure(figsize=(15,8))\r\n",
        "sns.heatmap(day_haour)\r\n"
      ],
      "execution_count": 220,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f750c760b38>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 220
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 1080x576 with 2 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 901
        },
        "id": "nlhh2FXV5e_F",
        "outputId": "5b4ea509-499f-4e3e-8678-9abb5f253d06"
      },
      "source": [
        "sns.clustermap(day_haour)"
      ],
      "execution_count": 221,
      "outputs": [
        {
          "output_type": "error",
          "ename": "ValueError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-221-529911e0730c>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0msns\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mclustermap\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mday_haour\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/seaborn/_decorators.py\u001b[0m in \u001b[0;36minner_f\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m     44\u001b[0m             )\n\u001b[1;32m     45\u001b[0m         \u001b[0mkwargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mupdate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m{\u001b[0m\u001b[0mk\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0marg\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mk\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0marg\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mzip\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msig\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mparameters\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 46\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     47\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0minner_f\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     48\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/seaborn/matrix.py\u001b[0m in \u001b[0;36mclustermap\u001b[0;34m(data, pivot_kws, method, metric, z_score, standard_scale, figsize, cbar_kws, row_cluster, col_cluster, row_linkage, col_linkage, row_colors, col_colors, mask, dendrogram_ratio, colors_ratio, cbar_pos, tree_kws, **kwargs)\u001b[0m\n\u001b[1;32m   1410\u001b[0m                         \u001b[0mrow_cluster\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mrow_cluster\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcol_cluster\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcol_cluster\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1411\u001b[0m                         \u001b[0mrow_linkage\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mrow_linkage\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcol_linkage\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcol_linkage\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1412\u001b[0;31m                         tree_kws=tree_kws, **kwargs)\n\u001b[0m",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/seaborn/matrix.py\u001b[0m in \u001b[0;36mplot\u001b[0;34m(self, metric, method, colorbar_kws, row_cluster, col_cluster, row_linkage, col_linkage, tree_kws, **kws)\u001b[0m\n\u001b[1;32m   1221\u001b[0m         self.plot_dendrograms(row_cluster, col_cluster, metric, method,\n\u001b[1;32m   1222\u001b[0m                               \u001b[0mrow_linkage\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mrow_linkage\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcol_linkage\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcol_linkage\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1223\u001b[0;31m                               tree_kws=tree_kws)\n\u001b[0m\u001b[1;32m   1224\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1225\u001b[0m             \u001b[0mxind\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdendrogram_col\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreordered_ind\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/seaborn/matrix.py\u001b[0m in \u001b[0;36mplot_dendrograms\u001b[0;34m(self, row_cluster, col_cluster, metric, method, row_linkage, col_linkage, tree_kws)\u001b[0m\n\u001b[1;32m   1077\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdata2d\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmetric\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mmetric\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmethod\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mmethod\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlabel\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1078\u001b[0m                 \u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0max\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0max_col_dendrogram\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlinkage\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcol_linkage\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1079\u001b[0;31m                 \u001b[0mtree_kws\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtree_kws\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1080\u001b[0m             )\n\u001b[1;32m   1081\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/seaborn/_decorators.py\u001b[0m in \u001b[0;36minner_f\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m     44\u001b[0m             )\n\u001b[1;32m     45\u001b[0m         \u001b[0mkwargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mupdate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m{\u001b[0m\u001b[0mk\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0marg\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mk\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0marg\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mzip\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msig\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mparameters\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 46\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     47\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0minner_f\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     48\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/seaborn/matrix.py\u001b[0m in \u001b[0;36mdendrogram\u001b[0;34m(data, linkage, axis, label, metric, method, rotate, tree_kws, ax)\u001b[0m\n\u001b[1;32m    774\u001b[0m     plotter = _DendrogramPlotter(data, linkage=linkage, axis=axis,\n\u001b[1;32m    775\u001b[0m                                  \u001b[0mmetric\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mmetric\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmethod\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mmethod\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 776\u001b[0;31m                                  label=label, rotate=rotate)\n\u001b[0m\u001b[1;32m    777\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0max\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    778\u001b[0m         \u001b[0max\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgca\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/seaborn/matrix.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, data, linkage, metric, method, axis, label, rotate)\u001b[0m\n\u001b[1;32m    582\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    583\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mlinkage\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 584\u001b[0;31m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlinkage\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcalculated_linkage\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    585\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    586\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlinkage\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlinkage\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/seaborn/matrix.py\u001b[0m in \u001b[0;36mcalculated_linkage\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    649\u001b[0m                 \u001b[0mwarnings\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwarn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmsg\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    650\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 651\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_calculate_linkage_scipy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    652\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    653\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mcalculate_dendrogram\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/seaborn/matrix.py\u001b[0m in \u001b[0;36m_calculate_linkage_scipy\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    618\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_calculate_linkage_scipy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    619\u001b[0m         linkage = hierarchy.linkage(self.array, method=self.method,\n\u001b[0;32m--> 620\u001b[0;31m                                     metric=self.metric)\n\u001b[0m\u001b[1;32m    621\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mlinkage\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    622\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/scipy/cluster/hierarchy.py\u001b[0m in \u001b[0;36mlinkage\u001b[0;34m(y, method, metric, optimal_ordering)\u001b[0m\n\u001b[1;32m   1062\u001b[0m                          \"finite values.\")\n\u001b[1;32m   1063\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1064\u001b[0;31m     \u001b[0mn\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdistance\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnum_obs_y\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1065\u001b[0m     \u001b[0mmethod_code\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_LINKAGE_METHODS\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mmethod\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1066\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/scipy/spatial/distance.py\u001b[0m in \u001b[0;36mnum_obs_y\u001b[0;34m(Y)\u001b[0m\n\u001b[1;32m   2401\u001b[0m     \u001b[0mk\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mY\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2402\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mk\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2403\u001b[0;31m         raise ValueError(\"The number of observations cannot be determined on \"\n\u001b[0m\u001b[1;32m   2404\u001b[0m                          \"an empty distance matrix.\")\n\u001b[1;32m   2405\u001b[0m     \u001b[0md\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mceil\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msqrt\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mk\u001b[0m \u001b[0;34m*\u001b[0m \u001b[0;36m2\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mValueError\u001b[0m: The number of observations cannot be determined on an empty distance matrix."
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 720x720 with 4 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "2C-Dsx1F6hez"
      },
      "source": [
        "day_month = df.groupby(by=['day_of_week','month']).count()['twp']"
      ],
      "execution_count": 225,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 358
        },
        "id": "jNGMXFl17UOp",
        "outputId": "17b48ab1-aefe-4209-c348-32b236aa9a4b"
      },
      "source": [
        "plt.figure(figsize=(15,8))\r\n",
        "sns.heatmap(day_month)\r\n"
      ],
      "execution_count": 226,
      "outputs": [
        {
          "output_type": "error",
          "ename": "IndexError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mIndexError\u001b[0m                                Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-226-d8072f50d8e2>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfigure\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfigsize\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m15\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m8\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0msns\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mheatmap\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mday_month\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/seaborn/_decorators.py\u001b[0m in \u001b[0;36minner_f\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m     44\u001b[0m             )\n\u001b[1;32m     45\u001b[0m         \u001b[0mkwargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mupdate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m{\u001b[0m\u001b[0mk\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0marg\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mk\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0marg\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mzip\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msig\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mparameters\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 46\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     47\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0minner_f\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     48\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/seaborn/matrix.py\u001b[0m in \u001b[0;36mheatmap\u001b[0;34m(data, vmin, vmax, cmap, center, robust, annot, fmt, annot_kws, linewidths, linecolor, cbar, cbar_kws, cbar_ax, square, xticklabels, yticklabels, mask, ax, **kwargs)\u001b[0m\n\u001b[1;32m    535\u001b[0m     plotter = _HeatMapper(data, vmin, vmax, cmap, center, robust, annot, fmt,\n\u001b[1;32m    536\u001b[0m                           \u001b[0mannot_kws\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcbar\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcbar_kws\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mxticklabels\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 537\u001b[0;31m                           yticklabels, mask)\n\u001b[0m\u001b[1;32m    538\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    539\u001b[0m     \u001b[0;31m# Add the pcolormesh kwargs here\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/seaborn/matrix.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, data, vmin, vmax, cmap, center, robust, annot, fmt, annot_kws, cbar, cbar_kws, xticklabels, yticklabels, mask)\u001b[0m\n\u001b[1;32m    105\u001b[0m         \u001b[0mmask\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_matrix_mask\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmask\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    106\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 107\u001b[0;31m         \u001b[0mplot_data\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mma\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmasked_where\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0masarray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmask\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mplot_data\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    108\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    109\u001b[0m         \u001b[0;31m# Get good names for the rows and columns\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/numpy/ma/core.py\u001b[0m in \u001b[0;36mmasked_where\u001b[0;34m(condition, a, copy)\u001b[0m\n\u001b[1;32m   1934\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mcshape\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mcshape\u001b[0m \u001b[0;34m!=\u001b[0m \u001b[0mashape\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1935\u001b[0m         raise IndexError(\"Inconsistent shape between the condition and the input\"\n\u001b[0;32m-> 1936\u001b[0;31m                          \" (got %s and %s)\" % (cshape, ashape))\n\u001b[0m\u001b[1;32m   1937\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mhasattr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0ma\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'_mask'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1938\u001b[0m         \u001b[0mcond\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmask_or\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcond\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0ma\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_mask\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mIndexError\u001b[0m: Inconsistent shape between the condition and the input (got (54, 1) and (54,))"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1080x576 with 0 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "hHNuZywg7ggb"
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    }
  ]
}